resume_controller.rb
11aug2010

######## actions below this need to be deleted #####################
####################################################################
	
	# GET /dashboard/:title
	def dashboard
		@user = User.find(session[:current_user_id])
		@resume = @user.resumes.find(:first, :conditions => ["title =?",params[:title]])
		@rtemplate = Rtemplate.find(:first, :conditions => ["id =?",@resume.rtemplate_id])	
	end

	# GET /options/:title
	def options
		@user = User.find(session[:current_user_id])
		@resume = @user.resumes.find(:first, :conditions => ["title =?",params[:title]])
		@rtemplate = Rtemplate.find(:first, :conditions => ["id =?",@resume.rtemplate_id])
		@all_rtemplates = Rtemplate.all
		set_urls(@resume)
		session[:return_to] = "/options/"+@resume.title
	end
	
	
	# POST /toggle_public_status
	def toggle_public_status
		@user = User.find(session[:current_user_id])
		@resume = @user.resumes.find(params[:resume_id])
		
		if params["request"] == "toggle"
			@resume.public_status = (@resume.public_status == "private") ? "public" : "private"
			result = @resume.save
			if result
				render :json => { :retVal => "true", "public_status" => @resume.public_status }
			else
				render :json => { :retVal => "error", "errorText" => result }
			end
		end
	end
	
	
	# GET /view/:title			# internal request - user is logged on and wants his own resume
	# GET /:username/:title		# external requests- for public resume - someone wants to see user's resume
	# GET /:username			# external request - for default public resume - not handled right now
	def view
		if session[:current_user_id]	# internal request
			@user 	= User.find(session[:current_user_id])
			@resume = @user.resumes.find(:first, :conditions => ["title =?",params[:title]])
			@rtemplate = Rtemplate.find(@resume.rtemplate_id)
			render :file =>
					@rtemplate.location			
		else
			# external request - no session
			@user = User.find(:first, :conditions => ["username =?",params[:username]])
			if params[:title]	# title present in url
				@resume = @user.resumes.find(:first, :conditions => ["title =?",params[:title]])
				if resume.public_status == "private"
					# show exception and exit
					return		
				end
			else	# no title in the url
				# show exception and exit
				return
			end
			@rtemplate = Rtemplate.find(@resume.rtemplate_id)
			render :file =>
					@rtemplate.location						
		end
	end
	
	# GET makepdf/:title   calls the wkhtmltopdf utility to create the pdf
	def makepdf
		@user = User.find(session[:current_user_id])
		@resume = @user.resumes.find(:first, :conditions => ["title =?",params[:title]])
		fileName = "#{@user.username}_#{@resume.title}"
		pdf_filePath = "#{RAILS_ROOT}/user_data/pdf/#{fileName}.pdf"
		
		# check if a pdf is already generated for this, and is not outdated
		if @resume.pdf_timestamp													# a pdf exists	
			if @resume.pdf_timestamp >= @resume.updated_at							# the pdf was created after last resume update
				send_file pdf_filePath, :type => 'pdf', :disposition => 'inline'	# send it
				logger.info "Info: Skipped resume creation - sent existing pdf"
				return
			end 
		end
		
		# render the template to a string 
		@rtemplate = Rtemplate.find(@resume.rtemplate_id)
		content = render_to_string :file =>	@rtemplate.location

		# and save it to a file
		html_filePath = "#{RAILS_ROOT}/user_data/html/#{fileName}.html"
		File.open(html_filePath, "w+") do |f| 
			f.write(content) 
		end

		# now use this file for pdf creation
		cmd = "wkhtmltopdf #{html_filePath} #{pdf_filePath}"
		logger.debug cmd
		@result = system cmd
		
		# send the created file to the browser, as inline - displayed not downloaded
		send_file pdf_filePath, :type => 'pdf', :disposition => 'inline'
		
		#update the pdf timestamp
		@resume.pdf_timestamp = DateTime.now()
		result = @resume.save
		if !result
			logger.warn "Warning: problem saving pdf timestamps"
		end
	end


resume_controller.rb
19mar2010

	#GET /dummy01/:title
	def dummy01
		# for some tests in the help functionality
		@user = User.find(session[:current_user_id])
		@resume = @user.resumes.find(:first, :conditions => ["title =?",params[:title]])
		@rhelps = Rhelp.find(:all, :conditions =>["rcontroller =? AND raction=?","resumes", "dummy01"])
		@helpObj = Hash.new
		@rhelps.each do |rhelp|
			@helpObj[rhelp.key] = rhelp.msg 
		end
	end
	
	#GET /dummy02/:title
	def dummy02
		# for testing the pdf functionality

		msg = "this could be a very long message ..." * 20
		Prawn::Document.generate "public/pdf/example004c.pdf" do |pdf|	
		
			@doc = pdf
			options[:document] = pdf
			options[:width] = 300
			box1 = Prawn::Text::Box.new(msg, {:document => pdf, :width => 500})
			box1.render(:dry_run => true)
			h = box1.height
			pdf.text h.to_s			
			#pdf.text_box(msg, {:at => [100,100], :width => 200, :height =>400})
		end
		render :text => "done"

#			20.times do |i| 
#				  starting_y = pdf.y 
#				  starting_page = pdf.page_number 
#				  # draw left column box 
#				  pdf.span 200, :position => :left do 
#					  2.times do 
#						pdf.text "Left #{i.to_s}" 
#						pdf.text "Page #{starting_page}" 
#						pdf.move_down 12 
#					  end 
#				  end 
#				  # align with left column 
#				  pdf.go_to_page starting_page 
#				  pdf.y = starting_y 
#				  # draw right column box 
#				  pdf.span 300, :position => :right do 
#					  4.times do 
#						pdf.text "Right #{i.to_s}" 
#						pdf.text "Page #{starting_page}" 
#						pdf.move_down 12 
#					  end 
#					  pdf.stroke_bounds 
#				  end 
#			end # loop
		
#			4.times do |i|
#				# left column
#				starting_y = pdf.y 
#				starting_page = pdf.page_number				
#				width = pdf.bounds.width * (1.0/4.0)			# 25%
#				pdf.span(width, :position => :left) do
#					pdf.text("Left: hello "+i.to_s)
#				end
#				
#				# right column
#				# align with left column 
#				pdf.go_to_page starting_page 
#				pdf.y = starting_y 				
#				width = pdf.bounds.width * (3.0/4.0)			# 75%
#				pdf.span(width, :position => :right) do
#					70.times do
#						pdf.text "Right: hi there "+i.to_s
#					end	
#				end
#				
#				
#			end		
#		msg = "pdf text aligned right"
#		content = "drawn content at origin"
#		pdf = Prawn::Document.new(:page_size => "A4")
#		pdf.text msg, :align => :right 
#		pdf.font "Times-Roman"
#		pdf.draw_text content, :at => [0,0]
#		pdf.bounding_box([200,100], :width => 100, :height => 100) do
#			pdf.stroke_bounds
#		end 
#		pdf.bounding_box([100,500], :width => 100, :height => 300) do
#			pdf.text "This text will flow in a very narrow box starting" +
#					"from [100,500]. The pointer will then be moved to [100,200]" +
#					"and return to the margin_box. Let us make the text larger to see what happens if it exceeds"+
#					"the height of the containing box. It may hide, overflow, or do something random"
#			pdf.stroke_bounds
#		end
#		
#		pdf.stroke_bounds
#
#		pdf.span(250, :position => :right) do
#			pdf.text "The column on the right. " * 50
#			pdf.stroke_bounds
#		end
#		pdf.span(150, :position => :left) do
#			pdf.text "The column on the left. " * 50
#			pdf.stroke_bounds
#		end

#		20.times do |i| 
#			pdf.span 200, :position => :center do 
#				pdf.text i.to_s 
#				pdf.stroke_bounds 
#			end 
#			pdf.move_down 30 
#		end 
#
#		pdf.render_file('public/pdf/example003.pdf')
#
#		render :text =>"done"
#		
#		pdf = Prawn::Document.new
#		pdf.text("Prawn Rocks...!!! isn't it")
#		# pdf.render_file('example.pdf')
#		
#		respond_to do |format|
#			format.pdf do
#				send_data pdf, 	:filename => "example.pdf", 	# fails with undefined method exception
#								:type => "application/pdf"
#			end
#		end
#		
#		# Three basic ways to create a document in Prawn:
#
#		# assignment 
#		pdf = Prawn::Document.new
#		pdf.text "Hello There"
#		pdf.render_file "example.pdf"
#
#		# implied block
#		Prawn::Document.generate "example.pdf" do
#			text "Hello There"
#		end
#
#		# explicit block - to use variables outside the block
#		words = "Hello There"
#		Prawn::Document.generate "example.pdf" do |pdf|
#			pdf.text words
#		end
#
#		# recommended at http://wiki.github.com/sandal/prawn/using-prawn-in-rails -
#
#		# in app/reports/hello_report.rb:
#		class HelloReport < Prawn::Document
#			def to_pdf
#     			text "Hello world"
#      			render
#    		end
#  		end
#		# in a controller -
# 		class HelloController < ApplicationController
#   		def index
#      			output = HelloReport.new.to_pdf
#
#      			respond_to do |format|
#					format.pdf do
#          				send_data output, :filename => "hello.pdf", 
#                            :type => "application/pdf"
#					end
#      			end
#   		end
# 		end
	end


	# GET getpdf/:title
	def getpdf
	
		@user = User.find(session[:current_user_id])
		@resume = @user.resumes.find(:first, :conditions => ["title =?",params[:title]])
		pdf_name = "public/pdf/"+@user.username+"_"+@resume.title+".pdf"
		
		Prawn::Document.generate pdf_name do |pdf|
			
			############ name ################
			pdf.move_down 18
			pdf.text @resume.name, :style => :bold, :size => 22
			
			############ contact ################
			pdf.move_down(18)
			pdf.text "Contact", :style => :bold, :size =>18
			x_pos = 0						# left-most
			y_pos = pdf.cursor				# current cursor position
			width = pdf.bounds.width/2		# half of the total width
			pdf.bounding_box([x_pos, y_pos], :width => width) do
				pdf.text "address", :style => :bold
				pdf.text @resume.contact.address
			end	
			x_pos = pdf.bounds.width/2		# from second half of the doc width
			y_pos = y_pos					# previously calculated y_pos
			width = width					# previously calculated width
			pdf.bounding_box([x_pos, y_pos], :width => width) do
				pdf.text "Email", :style => :bold, :align => :right
				pdf.text @resume.contact.emails, :align => :right
				pdf.text "Phone no.", :style => :bold, :align => :right
				pdf.text @resume.contact.phone_nos, :align => :right
			end	
			
			############ profile ################
			pdf.move_down(18)
			pdf.text "Profile", :style => :bold, :size =>18
			pdf.text @resume.profile.profile_text
			
			############ skills ################
			i=0
			prevSkill=""
			data = Array.new
			@resume.skills.each do |skill|
				if skill.skillset_type==prevSkill
					data[i] = ["", skill.skill_name, skill.skill_remarks]
				else
					data[i] = [skill.skillset_type, skill.skill_name, skill.skill_remarks]
				end	
				prevSkill = skill.skillset_type
				i +=1
			end
			pdf.move_down(18)
			pdf.text "Skills", :style => :bold, :size =>18
			pdf.table data, :border_width => 0
			
			############ education ################
			pdf.move_down(18)
			pdf.text "Education", :style => :bold, :size =>18
			@resume.educations.each do |education| 
				edu_text1 = education.level+', '+education.major+', '+education.score+', '+education.college
				edu_text2 = education.more_info
				pdf.text edu_text1
				pdf.text edu_text2, :size => 8
			end
			
			############ experience ################
			pdf.move_down(18)
			pdf.text "Experience", :style => :bold, :size =>18
			@resume.experiences.each do |experience|
				h_left = 0
				h_center = 0
				h_right = 0
				h_max = 0
				h_moveDown = 0
				y_init = pdf.cursor
				
				x_pos = 0
				y_pos = pdf.cursor
				width = 0.4*pdf.bounds.width
				pdf.bounding_box([x_pos, y_pos], :width => width) do
					h_left = pdf.height_of(experience.title, :style => :bold)
					pdf.text experience.title, :style => :bold
				end
				x_pos = x_pos + width
				y_pos = y_pos
				width = 0.3*pdf.bounds.width
				pdf.bounding_box([x_pos, y_pos], :width => width) do
					h_center = pdf.height_of(experience.duration, :style => :bold, :align => :center)
					pdf.text experience.duration, :style => :bold, :align => :center
				end
				x_pos = x_pos + width
				y_pos = y_pos
				width = 0.3*pdf.bounds.width
				pdf.bounding_box([x_pos, y_pos], :width => width) do
					h_right = pdf.height_of(experience.company, :style => :bold, :align => :right)
					pdf.text experience.company, :style => :bold, :align => :right
				end
				
				h_max = (h_left>h_center&&h_left>h_right) ? h_left : ((h_center>h_right)? h_center : h_right)
				h_moveDown = h_max - h_right
				pdf.move_down(h_moveDown)
				pdf.text experience.role
				pdf.text experience.more_info
				pdf.text " "					# remove this and it introduces two blank pages when h_moveDown>0
				#pdf.move_down(10)
			end
			
			############ achievements ################
			pdf.move_down(18)
			pdf.text "Achievements", :style => :bold, :size =>18
			pdf.text @resume.achievement.achievements_text
			
			############ hobbies ################
			pdf.move_down(18)
			pdf.text "Hobbies", :style => :bold, :size =>18
			pdf.text @resume.hobby.hobbies_text
			
		end

		render :text => "done"	
	end


	# GET getpdf2/:title
	def getpdf2
		@user = User.find(session[:current_user_id])
		@resume = @user.resumes.find(:first, :conditions => ["title =?",params[:title]])
		pdf_name = "public/pdf/"+@user.username+"_"+@resume.title+"_2a.pdf"	


		Prawn::Document.generate pdf_name do |pdf|

			col2lMargin = 30
			partGap = 18
			smallText = 8
			largeText = 14
			leftColRatio = 1.0/4.0
			rightColRatio = 3.0/4.0
			
			pdf.move_down 30

			starting_y = pdf.y 
			starting_page = pdf.page_number 			
			width = pdf.bounds.width * leftColRatio
			pdf.span width, :position => :left do
					pdf.text "contact", :align => :right, :style => :bold
					pdf.text "profile", :align => :right, :style => :bold
					pdf.text "skills", :align => :right, :style => :bold
					pdf.text "education", :align => :right, :style => :bold
					pdf.text "experience", :align => :right, :style => :bold
					pdf.text "achievements", :align => :right, :style => :bold
					pdf.text "hobbies", :align => :right, :style => :bold
					pdf.move_down 500
					
			end

			# align with left column 
			pdf.go_to_page starting_page 
			pdf.y = starting_y 
			width = pdf.bounds.width * rightColRatio - 40
			pdf.span width, :position => :right do
			
						############ contact ################
						#x_pos = 0
						#y_pos = pdf.cursor
						#width = pdf.bounds.width * leftColRatio			# 25%
						#pdf.bounding_box([x_pos, y_pos], :width => width) do
						#	pdf.text @resume.name, :style => :bold, :align => :right
						#end
						
						pdf.text @resume.contact.address
						pdf.text @resume.contact.emails
						pdf.text @resume.contact.phone_nos
						
						############ profile ################
						pdf.move_down(partGap)
						pdf.text @resume.profile.profile_text
						
						############ skills ################
						pdf.move_down(partGap)
						# logic to convert skills into a table
						# <skill-logic>
						prevSkillSetType=""
						skillData = Array.new
						@resume.skills.each do |skill|
							skillSetType = (skill.skillset_type==prevSkillSetType) ? "" : skill.skillset_type	# empty it if its a repeat
							skillData.push([skillSetType, skill.skill_name, skill.skill_remarks])
							prevSkillSetType = skill.skillset_type
						end
						# </skill-logic>
						pdf.table skillData, :border_width => 0		# display the skillData in a table
						

						############ education ################
						pdf.move_down(partGap)
						@resume.educations.each do |education| 
								edu_text1 = education.level+', '+education.major+', '+education.score+', '+education.college
								edu_text2 = education.more_info
								pdf.text edu_text1
								pdf.text edu_text2, :size => smallText
						end
						
						############ experience ################
						pdf.move_down(partGap)
						@resume.experiences.each do |experience|
								pdf.text experience.title, :style => :bold					
								pdf.text experience.company, :size => largeText
								pdf.text experience.duration, :style => :italic, :size => smallText
								pdf.text experience.role
								pdf.text experience.more_info
						end
						
						############ achievements ################
						pdf.move_down(partGap)
						pdf.text @resume.achievement.achievements_text
						
						############ hobbies ################
						pdf.move_down(partGap)
						pdf.text @resume.hobby.hobbies_text
				
			end # right span
		end	
		
		render :text => "done"	
	end